--- a/src/os_unix.c
+++ b/src/os_unix.c
@@ -555,6 +555,54 @@ static const char *unixNextSystemCall(sq
 # define SQLITE_MINIMUM_FILE_DESCRIPTOR 3
 #endif
 
+static int ensure_acceptable_fd(const char *z, int ofd, int f)
+{
+  int nfd = -1; /* new fd to return */
+  int tfd; /* temporary fd */
+
+  /* if fd is above minimum there is nothing to do */
+  if( ofd>=SQLITE_MINIMUM_FILE_DESCRIPTOR )
+    return ofd;
+
+  sqlite3_log(SQLITE_WARNING,
+	      "attempt to open \"%s\" as file descriptor %d", z, ofd);
+
+  /* fill fd below minimum with /dev/null */
+  while (nfd < SQLITE_MINIMUM_FILE_DESCRIPTOR){
+    nfd = osOpen("/dev/null", O_RDWR, SQLITE_DEFAULT_FILE_PERMISSIONS);
+    if(( nfd == -1 ) && ( errno!=EINTR )){
+      /* failed to open /dev/null */
+      osClose(ofd);
+      return -1;
+    }
+  }
+
+  /* dup original fd onto nfd */
+  if (dup2(ofd, nfd) < 0){
+    sqlite3_log(SQLITE_WARNING, "moving fd failed");
+    osClose(ofd);
+    osClose(nfd);
+    return -1;
+  }
+#if defined(O_CLOEXEC)
+  if (f & O_CLOEXEC){
+    fcntl(nfd, F_SETFD, FD_CLOEXEC);
+  }
+#endif
+
+  /* put /dev/null on original file descriptor */
+  tfd = osOpen("/dev/null", O_RDWR, SQLITE_DEFAULT_FILE_PERMISSIONS);
+  if (tfd != -1){
+    dup2(tfd, ofd);
+    osClose(tfd);
+  }
+
+  sqlite3_log(SQLITE_WARNING,
+	      "moved file descriptor %d to %d", ofd, nfd);
+
+  return nfd;
+}
+
 /*
 ** Invoke open().  Do so multiple times, until it either succeeds or
 ** fails for some reason other than EINTR.
@@ -573,24 +621,21 @@ static const char *unixNextSystemCall(sq
 ** recover the hot journals.
 */
 static int robust_open(const char *z, int f, mode_t m){
-  int fd;
+  int fd = -1;
   mode_t m2 = m ? m : SQLITE_DEFAULT_FILE_PERMISSIONS;
-  while(1){
+  while(fd < 0){
 #if defined(O_CLOEXEC)
-    fd = osOpen(z,f|O_CLOEXEC,m2);
-#else
-    fd = osOpen(z,f,m2);
+    f |= O_CLOEXEC;
 #endif
+    fd = osOpen(z,f,m2);
     if( fd<0 ){
       if( errno==EINTR ) continue;
       break;
     }
-    if( fd>=SQLITE_MINIMUM_FILE_DESCRIPTOR ) break;
-    osClose(fd);
-    sqlite3_log(SQLITE_WARNING, 
-                "attempt to open \"%s\" as file descriptor %d", z, fd);
-    fd = -1;
-    if( osOpen("/dev/null", f, m)<0 ) break;
+    fd = ensure_acceptable_fd(z, fd, f);
+    if( fd<0 ){
+      break;
+    }
   }
   if( fd>=0 ){
     if( m!=0 ){

Decription: fix improper large integers handling in printf function
Origin: backport, http://www.sqlite.org/cgi/src/info/c1fab9aca1fe1dda
Origin: backport, http://www.sqlite.org/cgi/src/info/c9a734406c016329
Origin: backport, https://www.sqlite.org/src/info/aeca95ac77f6f320
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=783968

Index: sqlite3-3.7.9/src/printf.c
===================================================================
--- sqlite3-3.7.9.orig/src/printf.c	2015-07-15 13:30:46.025304345 -0400
+++ sqlite3-3.7.9/src/printf.c	2015-07-15 13:30:46.021304293 -0400
@@ -232,28 +232,37 @@
       width = va_arg(ap,int);
       if( width<0 ){
         flag_leftjustify = 1;
-        width = -width;
+        width = width >= -2147483647 ? -width : 0;
       }
       c = *++fmt;
     }else{
+      unsigned wx = 0;
       while( c>='0' && c<='9' ){
-        width = width*10 + c - '0';
+        wx = wx*10 + c - '0';
         c = *++fmt;
       }
+      testcase( wx>0x7fffffff );
+      width = wx & 0x7fffffff;
     }
+
     /* Get the precision */
     if( c=='.' ){
       precision = 0;
       c = *++fmt;
       if( c=='*' ){
         precision = va_arg(ap,int);
-        if( precision<0 ) precision = -precision;
         c = *++fmt;
+        if( precision<0 ){
+          precision = precision >= -2147483647 ? -precision : -1;
+        }
       }else{
+        unsigned px = 0;
         while( c>='0' && c<='9' ){
-          precision = precision*10 + c - '0';
+          px = px*10 + c - '0';
           c = *++fmt;
         }
+        testcase( px>0x7fffffff );
+        precision = px & 0x7fffffff;
       }
     }else{
       precision = -1;
@@ -417,7 +426,8 @@
         for(idx=precision, rounder=0.4999; idx>0; idx--, rounder*=0.1);
 #else
         /* It makes more sense to use 0.5 */
-        for(idx=precision, rounder=0.5; idx>0; idx--, rounder*=0.1){}
+        testcase( precision>0xfff );
+        for(idx=precision&0xfff, rounder=0.5; idx>0; idx--, rounder*=0.1){}
 #endif
         if( xtype==etFLOAT ) realvalue += rounder;
         /* Normalize realvalue to within 10.0 > realvalue >= 1.0 */
@@ -470,8 +480,9 @@
         }else{
           e2 = exp;
         }
-        if( e2+precision+width > etBUFSIZE - 15 ){
-          bufpt = zExtra = sqlite3Malloc( e2+precision+width+15 );
+        if( MAX(e2,0)+(i64)precision+(i64)width > etBUFSIZE - 15 ){
+          bufpt = zExtra 
+              = sqlite3Malloc( MAX(e2,0)+(i64)precision+(i64)width+15 );
           if( bufpt==0 ){
             pAccum->mallocFailed = 1;
             return;
Index: sqlite3-3.7.9/test/printf.test
===================================================================
--- sqlite3-3.7.9.orig/test/printf.test	2015-07-15 13:30:46.025304345 -0400
+++ sqlite3-3.7.9/test/printf.test	2015-07-15 13:30:46.021304293 -0400
@@ -472,6 +472,18 @@
   sqlite3_mprintf_int {abc: (%#6d) (%#6x) (%#6o) :xyz}\
        0xff676981 0xff676981 0xff676981
 } {abc: (-9999999) (0xff676981) (037731664601) :xyz}
+do_test printf-1.17.1 {
+  sqlite3_mprintf_int {abd: %2147483647d %2147483647x %2147483647o} 1 1 1
+} {}
+do_test printf-1.17.2 {
+  sqlite3_mprintf_int {abd: %*d %x} 2147483647 1 1
+} {}
+do_test printf-1.17.3 {
+  sqlite3_mprintf_int {abd: %*d %x} -2147483648 1 1
+} {abd: 1 1}
+do_test printf-1.17.4 {
+  sqlite3_mprintf_int {abd: %.2147483648d %x %x} 1 1 1
+} {/.*/}
 do_test printf-2.1.1.1 {
   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 0.001
 } {abc: (0.0) :xyz}
@@ -526,6 +538,9 @@
 do_test printf-2.1.2.9 {
   sqlite3_mprintf_double {abc: %d %d (%1.1g) :xyz} 1 1 1.0e-20
 } {abc: 1 1 (1e-20) :xyz}
+do_test printf-2.1.2.10 {
+  sqlite3_mprintf_double {abc: %*.*f}  2000000000 1000000000 1.0e-20
+} {abc: }
 do_test printf-2.1.3.1 {
   sqlite3_mprintf_double {abc: (%*.*f) :xyz} 1 1 1.0
 } {abc: (1.0) :xyz}
@@ -3466,6 +3481,15 @@
 do_test printf-3.6 {
   sqlite3_mprintf_str {%d %d A String: (%-30s)} 1 2 {This is the string}
 } [format {%d %d A String: (%-30s)} 1 2 {This is the string}]
+do_test printf-3.7 {
+  sqlite3_mprintf_str {%d A String: (%*s)} 1 2147483647 {This is the string}
+} []
+do_test printf-3.8 {
+  sqlite3_mprintf_str {%d A String: (%*s)} 1 -2147483648 {This is the string}
+} {1 A String: (This is the string)}
+do_test printf-3.9 {
+  sqlite3_mprintf_str {%d A String: (%.*s)} 1 -2147483648 {This is the string}
+} {1 A String: (This is the string)}
 do_test snprintf-3.11 {
   sqlite3_snprintf_str 2 {x%d %d %s} 10 10 {This is the string}
 } {x}
@@ -3685,6 +3709,9 @@
 do_test printf-13.6 {
   sqlite3_mprintf_hexdouble %.20f fff8000000000000
 } {NaN}
+do_test printf-13.7 {
+  sqlite3_mprintf_hexdouble %2147483648.10000f 4693b8b5b5056e17
+} {/100000000000000000000000000000000.00/}
 
 do_test printf-14.1 {
   sqlite3_mprintf_str {abc-%y-123} 0 0 {not used}
Index: sqlite3-3.7.9/src/sqliteInt.h
===================================================================
--- sqlite3-3.7.9.orig/src/sqliteInt.h	2015-07-15 13:30:46.025304345 -0400
+++ sqlite3-3.7.9/src/sqliteInt.h	2015-07-15 13:30:46.021304293 -0400
@@ -374,6 +374,12 @@
 #endif
 
 /*
+** Macros to compute minimum and maximum of two numbers.
+*/
+#define MIN(A,B) ((A)<(B)?(A):(B))
+#define MAX(A,B) ((A)>(B)?(A):(B))
+
+/*
 ** Check to see if this machine uses EBCDIC.  (Yes, believe it or
 ** not, there are still machines out there that use EBCDIC.)
 */
Index: sqlite3-3.7.9/test/tester.tcl
===================================================================
--- sqlite3-3.7.9.orig/test/tester.tcl	2011-11-01 08:31:18.000000000 -0400
+++ sqlite3-3.7.9/test/tester.tcl	2015-07-15 13:30:59.537480797 -0400
@@ -57,7 +57,7 @@
 # Commands providing a lower level interface to the global test counters:
 #
 #      set_test_counter       COUNTER ?VALUE?
-#      omit_test              TESTNAME REASON
+#      omit_test              TESTNAME REASON ?APPEND?
 #      fail_test              TESTNAME
 #      incr_ntest
 #
@@ -274,6 +274,7 @@
   #   --file-retries=N
   #   --file-retry-delay=N
   #   --start=[$permutation:]$testfile
+  #   --match=$pattern
   #
   set cmdlinearg(soft-heap-limit)    0
   set cmdlinearg(maxerror)        1000
@@ -283,7 +284,8 @@
   set cmdlinearg(soak)               0
   set cmdlinearg(file-retries)       0
   set cmdlinearg(file-retry-delay)   0
-  set cmdlinearg(start)             "" 
+  set cmdlinearg(start)             ""
+  set cmdlinearg(match)             ""
 
   set leftover [list]
   foreach a $argv {
@@ -336,6 +338,12 @@
         }
         if {$::G(start:file) == ""} {unset ::G(start:file)}
       }
+      {^-+match=.+$} {
+        foreach {dummy cmdlinearg(match)} [split $a =] break
+
+        set ::G(match) $cmdlinearg(match)
+        if {$::G(match) == ""} {unset ::G(match)}
+      }
       default {
         lappend leftover $a
       }
@@ -414,9 +422,11 @@
 
 # Record the fact that a sequence of tests were omitted.
 #
-proc omit_test {name reason} {
+proc omit_test {name reason {append 1}} {
   set omitList [set_test_counter omit_list]
-  lappend omitList [list $name $reason]
+  if {$append} {
+    lappend omitList [list $name $reason]
+  }
   set_test_counter omit_list $omitList
 }
 
@@ -445,7 +455,6 @@
 # Invoke the do_test procedure to run a single test 
 #
 proc do_test {name cmd expected} {
-
   global argv cmdlinearg
 
   fix_testname name
@@ -471,14 +480,33 @@
   incr_ntest
   puts -nonewline $name...
   flush stdout
-  if {[catch {uplevel #0 "$cmd;\n"} result]} {
-    puts "\nError: $result"
-    fail_test $name
-  } elseif {[string compare $result $expected]} {
-    puts "\nExpected: \[$expected\]\n     Got: \[$result\]"
-    fail_test $name
+
+  if {![info exists ::G(match)] || [string match $::G(match) $name]} {
+    if {[catch {uplevel #0 "$cmd;\n"} result]} {
+      puts "\nError: $result"
+      fail_test $name
+    } else {
+      if {[regexp {^~?/.*/$} $expected]} {
+        if {[string index $expected 0]=="~"} {
+          set re [string range $expected 2 end-1]
+          set ok [expr {![regexp $re $result]}]
+        } else {
+          set re [string range $expected 1 end-1]
+          set ok [regexp $re $result]
+        }
+      } else {
+        set ok [expr {[string compare $result $expected]==0}]
+      }
+      if {!$ok} {
+        puts "\nExpected: \[$expected\]\n     Got: \[$result\]"
+        fail_test $name
+      } else {
+        puts " Ok"
+      }
+    }
   } else {
-    puts " Ok"
+    puts " Omitted"
+    omit_test $name "pattern mismatch" 0
   }
   flush stdout
 }

From 1e490c4ca6b43a9cf8637d695907888349f69bec Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Mon, 23 Dec 2019 21:11:15 +0000
Subject: [PATCH] Test case for the zipfile-extension bug fix of the previous
 check-in.

FossilOrigin-Name: bc8bfc7fcdf33f6855584e10e9260073430517ff3268cf0c7988dcc4cd785391
---
 test/zipfile.test | 12 ++++++++++++
 3 files changed, 19 insertions(+), 7 deletions(-)

From d8f2d46cbc9925e034a68aaaf60aad788d9373c1 Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Mon, 23 Dec 2019 21:04:33 +0000
Subject: [PATCH] Fix the zipfile() function in the zipfile extension so that
 it is able to deal with goofy filenames that contain embedded zeros.

FossilOrigin-Name: cc0fb00a128fd0773db5ff7891f7aa577a3671d570166d2cbb30df922344adcf
---
 ext/misc/zipfile.c |  4 ++--
 3 files changed, 9 insertions(+), 9 deletions(-)


--- sqlite3-3.27.2.orig/ext/misc/zipfile.c
+++ sqlite3-3.27.2/ext/misc/zipfile.c
@@ -1632,7 +1632,7 @@ static int zipfileUpdate(
         zFree = sqlite3_mprintf("%s/", zPath);
         if( zFree==0 ){ rc = SQLITE_NOMEM; }
         zPath = (const char*)zFree;
-        nPath++;
+        nPath = (int)strlen(zPath);
       }
     }
 
@@ -2033,11 +2033,11 @@ void zipfileStep(sqlite3_context *pCtx,
   }else{
     if( zName[nName-1]!='/' ){
       zName = zFree = sqlite3_mprintf("%s/", zName);
-      nName++;
       if( zName==0 ){
         rc = SQLITE_NOMEM;
         goto zipfile_step_out;
       }
+      nName = (int)strlen(zName);
     }else{
       while( nName>1 && zName[nName-2]=='/' ) nName--;
     }
--- sqlite3-3.27.2.orig/test/zipfile.test
+++ sqlite3-3.27.2/test/zipfile.test
@@ -808,5 +808,17 @@ do_execsql_test 13.10 {
          quote(data),quote(method) FROM t1;
 } {'' 10 10 2 X'3130' X'3130' 0}
 
+# 2019-12-23 Yongheng and Rui fuzzer
+# Run using valgrind to see the problem.
+#
+do_execsql_test 14.10 {
+  DROP TABLE t1;
+  CREATE TABLE t1(x char);
+  INSERT INTO t1(x) VALUES('1');
+  INSERT INTO t1(x) SELECT zipfile(x, 'xyz') FROM t1;
+  INSERT INTO t1(x) SELECT zipfile(x, 'uvw') FROM t1;
+  SELECT count(*) FROM t1;
+  PRAGMA integrity_check;
+} {3 ok}
 
 finish_test

From a6c1a71cde082e09750465d5675699062922e387 Mon Sep 17 00:00:00 2001
From: dan <dan@noemail.net>
Date: Fri, 27 Dec 2019 20:54:42 +0000
Subject: [PATCH] Do not attempt to unwind the WITH stack in the Parse object
 following an error. This fixes a separate case to [de6e6d68].

From 46a31cdf6b7c1197e01627f91af601479cd99940 Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Sat, 9 Nov 2019 14:38:58 +0000
Subject: [PATCH] Make sure the WITH stack in the Parse object is disabled
 following an error.

diff -Naur sqlite3-3.27.2.orig/src/select.c sqlite3-3.27.2/src/select.c
--- sqlite3-3.27.2.orig/src/select.c	2019-02-25 17:31:57.000000000 +0100
+++ sqlite3-3.27.2/src/select.c	2020-10-07 14:15:03.938758886 +0200
@@ -4642,6 +4642,9 @@
   With *pWith;                    /* WITH clause that pCte belongs to */
 
   assert( pFrom->pTab==0 );
+  if( pParse->nErr ){
+    return SQLITE_ERROR;
+  }
 
   pCte = searchWith(pParse->pWith, pFrom, &pWith);
   if( pCte ){
@@ -4911,7 +4914,7 @@
 
   /* Process NATURAL keywords, and ON and USING clauses of joins.
   */
-  if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){
+  if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){
     return WRC_Abort;
   }
 
diff -Naur sqlite3-3.27.2.orig/src/util.c sqlite3-3.27.2/src/util.c
--- sqlite3-3.27.2.orig/src/util.c	2020-10-07 14:01:30.000000000 +0200
+++ sqlite3-3.27.2/src/util.c	2020-10-07 14:15:03.938758886 +0200
@@ -222,6 +222,7 @@
     sqlite3DbFree(db, pParse->zErrMsg);
     pParse->zErrMsg = zMsg;
     pParse->rc = SQLITE_ERROR;
+    pParse->pWith = 0;
   }
 }
 
diff -Naur sqlite3-3.27.2.orig/test/altertab3.test sqlite3-3.27.2/test/altertab3.test
--- sqlite3-3.27.2.orig/test/altertab3.test	2020-10-07 14:01:30.000000000 +0200
+++ sqlite3-3.27.2/test/altertab3.test	2020-10-07 14:14:48.427575673 +0200
@@ -112,6 +112,28 @@
   SELECT * FROM sqlite_master WHERE type='table' AND name!='t1';
 } {table t3 t3 3 {CREATE TABLE t3(e, f)}}
 
+#------------------------------------------------------------------------
+#
+reset_db
+do_execsql_test 23.1 {
+  CREATE TABLE v0 (a);
+  CREATE VIEW v2 (v3) AS 
+    WITH x1 AS (SELECT * FROM v2) 
+    SELECT v3 AS x, v3 AS y FROM v2; 
+}
+
+do_catchsql_test 23.2 {
+  SELECT * FROM v2
+} {1 {view v2 is circularly defined}}
+
+db close
+sqlite3 db test.db
+
+do_catchsql_test 23.3 {
+  ALTER TABLE v0 RENAME TO t3 ;
+} {1 {error in view v2: view v2 is circularly defined}}
+
+
 finish_test
 
 
diff -Naur sqlite3-3.27.2.orig/test/with3.test sqlite3-3.27.2/test/with3.test
--- sqlite3-3.27.2.orig/test/with3.test	2019-02-25 17:31:57.000000000 +0100
+++ sqlite3-3.27.2/test/with3.test	2020-10-07 14:15:03.938758886 +0200
@@ -30,7 +30,15 @@
     SELECT 5 FROM t0 UNION SELECT 8 FROM m
   )
   SELECT * FROM i;
-} {1 {no such table: m}}
+} {1 {no such table: t0}}
+
+# 2019-11-09 dbfuzzcheck find
+do_catchsql_test 1.1 {
+  CREATE VIEW v1(x,y) AS
+    WITH t1(a,b) AS (VALUES(1,2))
+    SELECT * FROM nosuchtable JOIN t1;
+  SELECT * FROM v1;
+} {1 {no such table: main.nosuchtable}}
 
 # Additional test cases that came out of the work to
 # fix for Kostya's problem.
